Vector = {
	static new(x, y) => {
		this.x, this.y = x, y
	}
	
	add = (that) => {
		this.x += that.x
		this.y += that.y
	}
	
	static add = (a, b) => {
		return Vector(a.x + b.x, a.y + b.y)
	}
}

Vector = {
	this.name = "This is a vector"
	
	this.new = (x, y) => {
		// `this` is `Vector` (current scope)
		return {
			x = x
			y = y
			proto = Vector
		}
	}
	
	this.instance.add = (this, that) => {
		// `this` is Vector instance
		this.x += that.x
		this.y += that.y
	}
	
	this.add = (a, b) => {
		// `this` is `Vector` (current scope)
		return this.new(a.x + b.x, a.y + b.y)
	}
}

vec = Vector(2, 3)
vec = {
	x = 2
	y = 3
	proto = Vector
}

vec.add(vec)
vec.proto.instance.add(vec, vec)

vec.name
vec.proto.name

v2 = Vector.add(vec, vec)



Class = {
	"()" (...args) => {
		const instance = this.clone {}
		instance.init(...args)
		return instance
	}
}

@extend Class
@implement(Object, Tuple)
Vector = @class(extends = Object, implements = [Object, Tuple]) {
	init(x, y) => {
		this.x, this.y = x, y
	}
	
	add(that) {
		this.x += that.x
		this.y += that.y
	}
	
	clone() => Vector(this.x, this.y)
	
	@static
	random() => Vector(Math.random(), Math.random())
}

vec = Vector(10, 20)

vec = { _Proto = Vector }
vec.init(10, 20)

// Use static function as instance function: ✅
vec2 = Vector.random()
vec2 = vec.random()

// Use instance function as static function: ❌
vec2 = vec.clone()
vec2 = Vector.clone(vec)

vec2 = Vector.add(vec, vec2)
vec2 = Vector.add.apply(vec, vec2)
vec2 = Vector.add.bind(vec)(vec2)
vec2 = Vector.add.apply(vec.clone(), vec2)
vec2 = vec.clone().add(vec2)
