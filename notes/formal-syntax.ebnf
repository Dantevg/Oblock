program		= expression ;
expression	= function ;

(* Expressions *)
function	= fn | disjunction ;
disjunction	= conjunction {'||' conjunction} ;
conjunction	= application {'&&' application} ;
application	= comparison {'|>' comparison} ;
comparison	= bitwise {('==' | '!=' | '<' | '>' | '<=' | '>=') bitwise} ;
bitwise		= addsub {('>>' | '<<') addsub} ;
addsub		= muldiv {('+' | '-') muldiv} ;
muldiv		= unary {('*' | '/') unary} ;
unary		= ('-' | '!' | '...') unary | call ;
call		= variable {variable} ;
variable	= [primary] {'.' primary} ;
primary		= Identifier | Number | String | group | list | block ;
group		= '(' expseq ')' ;
list		= '[' expseq ']' ;
block		= '{' statseq '}' ;

(* Statements *)
statement	= 'return' explist
			| 'yield' explist
			| 'if' expression ':' statement ['else' statement]
			| 'while' expression ':' statement
			| 'for' Identifier 'in' expression ':' statement
			| assignment ;
assignment	= {modifier} explist ['=' explist | fn]
			| expression ;

(* Smaller components *)
fn			= (Identifier | '(' param {',' param} ')') '=>' expression ;
expseq		= {primary '=' expression | expression | ','} ;
statseq		= {statement | ';'} ;
explist		= expression {',' expression} ;
param		= ['...'] Identifier ;
modifier	= 'var' | 'const' | 'instance' ;
