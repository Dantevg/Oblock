program		= expression ;
expression	= control ;

(* Expressions *)
control		= 'if' expression ':' statement ['else' statement]
			| 'while' expression ':' statement
			| 'for' paramlist 'in' expression ':' statement
			| function ;
function	= fn | disjunction ;
disjunction	= conjunction {'or' conjunction} ;
conjunction	= application {'and' application} ;
application	= comparison {'|>' comparison} ;
comparison	= bitwise {('==' | '!=' | '<' | '>' | '<=' | '>=') bitwise} ;
bitwise		= addsub {('>>' | '<<') addsub} ;
addsub		= muldiv {('+' | '-') muldiv} ;
muldiv		= unary {('*' | '/') unary} ;
unary		= ('-' | '!' | '...') unary | varcall ;
varcall		= [primary] {'.' primary | primary} ;
primary		= Identifier | Number | String | group | list | block ;
group		= '(' expseq ')' ;
list		= '[' expseq ']' ;
block		= '{' statseq '}' ;

(* Statements *)
statement	= 'return' [explist]
			| 'yield' [explist]
			| 'break' {'break'} [explist]
			| 'continue'
			| ';'
			| assignment ;
assignment	= {modifier} explist ['=' explist | fn]
			| expression ;

(* Smaller components *)
fn			= (Identifier | '(' paramlist ')') '=>' expression ;
expseq		= {primary '=' expression | expression | ','} ;
statseq		= {statement} ;
explist		= expression {',' expression} ;
paramlist	= param {',' param} ;
param		= ['...'] Identifier ;
modifier	= 'var' | 'const' | 'static' | 'instance' ;
