program		= expression ;
expression	= defexpr ;

(* Expressions *)
defexpr		= variable ':=' function ;
function	= fn | disjunction ;
disjunction = conjunction {'||' conjunction} ;
conjunction	= comparison {'&&' comparison} ;
comparison	= bitwise {('==' | '!=' | '<' | '>' | '<=' | '>=') bitwise} ;
bitwise		= addsub {('>>' | '<<') addsub} ;
addsub		= muldiv {('+' | '-') muldiv} ;
muldiv		= unary {('*' | '/') unary} ;
unary		= ('-' | '!' | '...') unary
			| call ;
call		= variable variable {variable}
			| variable ;
variable	= (primary | index) {index} ;
index		= '.' (Identifier | '[' expression ']') ;
primary		= Identifier | Number | String | group | list | block ;
group		= '(' expseq ')' ;
list		= '[' expseq ']' ;
block		= '{' statseq '}' ;

(* Statements *)
statement	= 'return' expression
			| 'yield' expression
			| 'if' expression ':' statement ['else' statement]
			| 'while' expression ':' statement
			| 'for' Identifier 'in' expression ':' statement
			| definition ;
definition	= ('var' | modifier {modifier}) varlist ['=' explist | fn]
			| varlist ':=' explist
			| assignment ;
assignment	= varlist '=' explist
			| expression ;

(* Smaller components *)
fn			= (Identifier | '(' param {',' param} ')') '=>' expression ;
expseq		= {expression | ','} ;
statseq		= {statement | ';'} ;
varlist		= variable {',' variable} ;
explist		= expression {',' expression} ;
param		= ['...'] Identifier ;
modifier	= 'const' | 'instance' ;
