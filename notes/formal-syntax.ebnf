program		= statseq ;
expression	= control ;

(* Expressions *)
control		= 'if' expression 'then' statement ['else' statement]
			| 'while' expression 'do' statement
			| 'for' patlist 'in' expression 'do' statement
			| function ;
function	= fn | disjunction ;
disjunction	= conjunction {'or' conjunction} ;
conjunction	= application {'and' application} ;
application	= lowpredop {'|>' lowpredop} ;
lowpredop	= comparison {'++' comparison} ;
comparison	= bitwise {('==' | '!=' | '<' | '>' | '<=' | '>=') bitwise} ;
bitwise		= addsub {('>>' | '<<') addsub} ;
addsub		= muldiv {('+' | '-') muldiv} ;
muldiv		= range {('*' | '/' | '//' | '%') range} ;
range		= unary {'..' unary} ;
unary		= ('-' | '!' | '#' | '...') unary | call ;
call		= primary {primary} ;
primary		= Identifier | Symbol | Number | String | group | list | block ;
group		= '(' expseq ')' ;
list		= '[' expseq ']' ;
block		= '{' statseq '}' ;

(* Statements *)
statement	= 'return' [explist]
			| 'yield' [explist]
			| 'break' {'break'} [explist]
			| 'continue'
			| ';'
			| definition ;
definition	= {modifier} Identifier {',' Identifier} ['=' explist]
			| {modifier} Identifier fn
			| assignment ;
assignment	= patlist ':=' explist
			| expression ;

(* Patterns *)
pattern		= Identifier | Number | String | grouppat | listpat | blockpat ;
grouppat	= '(' patexpseq [restpat] patexpseq ')' ;
listpat		= '[' patexpseq [restpat] patexpseq ']' ;
blockpat	= '{' patstatseq [restpat] patstatseq '}' ;
(* varpat		= '\(' Identifier ')' ; *)
restpat		= '...' Identifier ;
patexpseq	= {pattern | ','} ;
patstatseq	= {Identifier '=' expression | Identifier | ';'} ;

(* Smaller components *)
fn			= pattern '=>' expression ;
expseq		= {primary '=' expression | expression | ','} ;
statseq		= {statement} ;
explist		= expression {',' expression} ;
patlist		= pattern {',' pattern} ;
modifier	= 'var' | 'const' | 'rec' ;
