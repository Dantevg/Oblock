program		= expression ;
expression	= function ;

(* Expressions *)
function	= fn | disjunction ;
disjunction = conjunction {'||' conjunction} ;
conjunction	= comparison {'&&' comparison} ;
comparison	= bitwise {('==' | '!=' | '<' | '>' | '<=' | '>=') bitwise} ;
bitwise		= addsub {('>>' | '<<') addsub} ;
addsub		= muldiv {('+' | '-') muldiv} ;
muldiv		= unary {('*' | '/') unary} ;
unary		= ('-' | '!' | '...') unary
			| call ;
call		= variable variable {variable} ;
variable	= [primary] {'.' (Identifier | '[' expression ']')} ;
primary		= Identifier | Number | String | group | list | block ;
group		= '(' expdeflist ')' ;
list		= '[' expdeflist ']' ;
block		= '{' statlist '}' ;

(* Statements *)
statement	= 'return' expression
			| 'yield' expression
			| 'if' expression ':' statement ['else' statement]
			| 'while' expression ':' statement
			| 'for' Identifier 'in' expression ':' statement
			| definition ;
definition	= ('var' | modifier {modifier}) variable ['=' expression | fn]
			| variable ':=' expression
			| assignment ;
assignment	= variable '=' expression
			| expression ;

(* Smaller components *)
fn			= (Identifier | '(' param {',' param} ')') '=>' expression ;
expdeflist	= {definition | ','} ;
statlist	= {statement | ';'} ;
param		= ['...'] Identifier ;
modifier	= 'const' | 'instance' ;
