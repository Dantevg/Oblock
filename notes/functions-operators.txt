add(x, y) => x + y
incr(x) => x + 1
one = 1

sqr(x) => add(x, x)
two = add(1, 1)
getTwo() => add(1, 1)

Defining custom operators / extending existing operators
- Defining new infix operators needs a precedence value and associativity
  - Where to define this?
  - What to do about clashing precedence values?
  - Solution: pre-define some operators and their precedence,
    use the same precedence and associativity for all new operators.

 string + char * int
 string +(char * int)
(string + char)* int
 "hello" + 'a' * 3
 "hello" +('a' * 3) = "hello" + "aaa" = "helloaaa"
("hello" + 'a')* 3 = "helloa" * 3 = "helloahelloahelloa"

Possible syntax for using different values as index:
- Character operator
  +(b),   a.+(b)  (clashes with string indexing syntax sugar: translates to a["+"](b))
  `+`(b)          (meh)
  [+](b), a[+](b) (like Lua, good idea)
  operator +(b)   (not generic enough (numbers?), how does getter/setter work?)

- Keyword operator (words as operators might not be a good idea, ambiguous-syntax wise)
  is(b),   a.is(b)
  `is`(b)
  [is](b), a[is](b)
  operator is(b)

- Other character operator
  ()(b),   a.()(b)
  `()`(b)
  [()](b), a[()](b)
  operator ()(b)

- Numbers
  2(b),   a.2(b)
  `2`(b)
  [2](b), a[2](b)
  operator 2(b)

- Strings
  "x"(b)
  x(b),     a.x(b)
  ["x"](b), a["x"](b)

- Arbitrary expressions
  (x+1)(b), a.(x+1)(b)
  `x+1`(b)
  [x+1](b), a[x+1](b)

Lists / arrays
a = {
	[1] = 10
	[2] = 20
}

a = {[1] = 10, [2] = 20}

map add ...(10, 20, 30)

a = ...(1, 2, 3)

a = ...()

a, b, c = 10, 20, 30

(a, b, c) = (10, 20, 30)

(a, b, c) = ...x
