Range = import "Range"

var Stream
Stream := {
	-- SOURCES / GENERATORS
	-- These functions transform zero or more values into a stream
	
	of(source) => {
		iterator = source.iterate()
		return this.clone {
			read = id.o iterator
		}
	}
	
	iterate() => this.read
	
	"..." () => {
		values = []
		for value in this: values.append value
		return ...values
	}
	
	empty() => this.clone { read() => nil }
	
	-- FILTERS / ADAPTERS / TRANSFORMERS
	-- These functions transform a stream into another stream
	
	map(fn) => this.clone {
		source = this
		var i = 0
		read() => {
			val = source.read()
			i += 1
			return if val != nil: fn(val, i)
		}
	}
	
	mapIndex(object) => this.map(x => object.(x))
	
	flat() => this.clone {
		source = this
		var latest = source.read()
		read() => {
			if latest == nil: return nil
			var value = latest.read()
			while value == nil: {
				latest := source.read()
				if latest == nil: return nil
				value := latest.read()
			}
			return value
		}
	}
	
	forEach(fn) => this.clone {
		source = this
		var i = 0
		read() => {
			i += 1
			val = source.read()
			if val != nil: fn(val, i)
			return val
		}
	}
	
	filter(fn) => this.clone {
		source = this
		var i = 0
		read() => {
			for x in source: {
				i += 1
				if fn(x, i): return x
			}
			return nil
		}
	}
	
	takeWhile(fn) => this.clone {
		source = this
		var i = 0
		read() => {
			i += 1
			value = source.read()
			if value != nil and fn(value, i): return value
			return nil
		}
	}
	
	takeUntil(fn) => this.clone {
		source = this
		var i = 0
		var stopped = false
		read() => {
			if stopped: return nil
			i += 1
			value = source.read()
			if value == nil or !fn(value, i): return value
			else {
				stopped := true
				return value
			}
		}
	}
	
	take(n) => this.clone {
		source = this
		var taken = 0
		read() => {
			if taken < n: {
				taken += 1
				return source.read()
			}
			return nil
		}
	}
	
	drop(n) => this.clone {
		source = this
		var dropped = 0
		read() => {
			while dropped < n: {
				dropped += 1
				source.read()
			}
			return source.read()
		}
	}
	
	group(fn, keepEmpty) => this.clone {
		source = this
		var buffer = []
		read() => {
			for x in source: {
				if fn(x, buffer): {
					buffer.append(x)
				} else if buffer.length > 0 or keepEmpty: {
					oldBuffer = buffer
					buffer := if fn(x, []): [x] else []
					return Stream.of(oldBuffer)
				}
			}
			-- Source is empty, buffer still has items
			if buffer.length > 0: {
				oldBuffer = buffer
				buffer := []
				return Stream.of(oldBuffer)
			}
			return nil
		}
	}
	
	groupBySize(size) => this.group((_, buffer) => #buffer < size)
	
	splitAt(at, keepEmpty) => this.group(x => x != at, keepEmpty)
	
	windowed(size, step) => this.clone {
		source = this
		var window = []
		-- Fill initial window
		for i in Range(1, size): {
			value = source.read()
			if value == nil: return Stream.empty()
			window.append(value)
		}
		read() => {
			oldWindow = window
			for i in Range(1, step or 1): {
				value = source.read()
				if value != nil: window := window.sub(2) ++ [value]
				else { window = nil; break }
			}
			return oldWindow
		}
	}
	
	sorted(fn) => this.clone {
		source = this
		var values
		read() => {
			if !values: values := Stream.of([...source].sorted(fn))
			return values.read()
		}
	}
	
	distinct() => {
		occurred = {}
		return this.filter(x => {
			has = occurred.(x)
			occurred.(x) := true
			return !has
		})
	}
	
	concat(that) => this.clone {
		var source = this
		read() => {
			value = source.read()
			if value != nil: return value
			source := that
			return source.read()
		}
	}
	
	"++" = concat
	
	zipWith(that, partial) => this.clone {
		source = this
		read() => {
			a, b = source.read(), that.read()
			if !partial and (a == nil or b == nil): return nil
			return [a, b]
		}
	}
	
	repeat() => this.clone {
		source = this
		data = []
		var i = 0
		read() => {
			if i == 0: {
				value = source.read()
				if value != nil: {
					data.append(value)
					return value
				}
			}
			i := (i % #data) + 1
			return data.(i)
		}
	}
	
	-- SINKS / CONSUMERS
	-- These functions transform a stream into a single value
	
	reduce(fn, acc) => {
		acc := acc or this.read()
		for x in this: acc := fn(acc, x)
		return acc
	}
	
	max() => this.reduce((acc, x) => Number.max(acc, x))
	min() => this.reduce((acc, x) => Number.min(acc, x))
	sum() => this.reduce((acc, x) => acc + x)
	count() => this.reduce((acc, x) => acc + 1, 0)
	
	forAll(fn) => for x, i in this: fn(x, i)
	
	any(predicate) => {
		for x in this: if predicate(x): return true
		return false
	}
	
	all(predicate) => {
		for x in this: if !predicate(x): return false
		return true
	}
	
	toList() => [...this]
	toBlock(fn) => this.reduce((acc, x) => {
		key, value = fn(x)
		acc.(key) := value
		return acc
	}, {})
}

yield Stream
