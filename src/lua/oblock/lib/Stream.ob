const Range = import "Range"

var Stream
Stream = {
	of(source) => {
		iterator = source.iterate()
		return this.clone {
			read = id.o iterator
		}
	}
	
	iterate() => this.read
	
	"..." () => {
		const values = []
		for value in this: values.append value
		return ...values
	}
	
	empty() => this.clone { read() => nil }
	
	-- FILTERS
	-- These functions transform a stream into another stream
	
	map(fn) => this.clone {
		const source = this
		var i = 0
		read() => {
			val = source.read()
			i += 1
			return if val != nil: fn(val, i)
		}
	}
	
	mapIndex(object) => this.map(x => object.(x))
	
	forEach(fn) => this.clone {
		const source = this
		var i = 0
		read() => {
			i += 1
			val = source.read()
			if val != nil: fn(val, i)
			return val
		}
	}
	
	filter(fn) => this.clone {
		const source = this
		var i = 0
		read() => {
			for x in source: {
				i += 1
				if fn(x, i): return x
			}
			return nil
		}
	}
	
	takeWhile(fn) => this.clone {
		const source = this
		i = 0
		read() => {
			i += 1
			value = source.read()
			if value != nil and fn(value, i): return value
			return nil
		}
	}
	
	take(n) => this.clone {
		const source = this
		taken = 0
		read() => {
			if taken < n: {
				taken += 1
				return source.read()
			}
			return nil
		}
	}
	
	drop(n) => this.clone {
		const source = this
		dropped = 0
		read() => {
			while dropped < n: {
				dropped += 1
				source.read()
			}
			return source.read()
		}
	}
	
	group(fn, keepEmpty) => this.clone {
		const source = this
		buffer = []
		read() => {
			for x in source: {
				if fn(x, buffer): {
					buffer.append(x)
				} else if buffer.length > 0 or keepEmpty: {
					const oldBuffer = buffer
					buffer = if fn(x, []): [x] else []
					return Stream.of(oldBuffer)
				}
			}
			-- Source is empty, buffer still has items
			if buffer.length > 0: {
				const oldBuffer = buffer
				buffer = []
				return Stream.of(oldBuffer)
			}
			return nil
		}
	}
	
	groupBySize(size) => this.group((_, buffer) => #buffer < size)
	
	splitAt(at, keepEmpty) => this.group(x => x != at, keepEmpty)
	
	windowed(size, step) => this.clone {
		const source = this
		var window = []
		-- Fill initial window
		for i in Range(1, size): {
			const value = source.read()
			if value == nil: return Stream.empty()
			window.append(value)
		}
		read() => {
			const oldWindow = window
			for i in Range(1, step or 1): {
				const value = source.read()
				if value != nil: window = window.sub(2) ++ [value]
				else { window = nil; break }
			}
			return oldWindow
		}
	}
	
	sorted(fn) => this.clone {
		const source = this
		var values
		read() => {
			if !values: values = Stream.of([...source].sorted(fn))
			return values.read()
		}
	}
	
	distinct() => {
		const occurred = {}
		return this.filter(x => {
			const has = occurred.(x)
			occurred.(x) = true
			return !has
		})
	}
	
	-- SINKS
	-- These functions transform a stream into a single value
	
	reduce(fn, acc) => {
		acc = acc or this.read()
		for x in this: acc = fn(acc, x)
		return acc
	}
	
	max() => this.reduce((acc, x) => Number.max(acc, x))
	min() => this.reduce((acc, x) => Number.min(acc, x))
	sum() => this.reduce((acc, x) => acc + x)
	count() => this.reduce((acc, x) => acc + 1, 0)
	
	forAll(fn) => for x, i in this: fn(x, i)
	
	any(predicate) => {
		for x in this: if predicate(x): return true
		return false
	}
	
	all(predicate) => {
		for x in this: if !predicate(x): return false
		return true
	}
}

yield Stream
