var Stream
Stream = {
	"()" source => {
		iterator = source.iterate()
		return this.clone {
			read = id.o iterator
		}
	}
	
	iterate() => this.read
	
	"..." () => {
		const values = []
		for value in this: values.push value
		return ...values
	}
	
	map(fn) => this.clone {
		const source = this
		read() => {
			val = source.read()
			return if val != nil: fn(val)
		}
	}
	
	group(fn) => this.clone {
		const source = this
		buffer = []
		read() => {
			for x in source: {
				if fn(x, buffer.(buffer.length), buffer.length): {
					buffer.append(x)
				} else if buffer.length > 0: {
					const oldBuffer = buffer
					buffer = if fn(x, nil, 0): [x] else []
					return Stream(oldBuffer)
				}
			}
			-- Source is empty, buffer still has items
			if buffer.length > 0: {
				const oldBuffer = buffer
				buffer = []
				return Stream(oldBuffer)
			}
			return nil
		}
	}
	
	splitAt(at) => this.group(x => x != at)
}

yield Stream
