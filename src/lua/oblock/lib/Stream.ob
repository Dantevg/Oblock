var Stream
Stream = {
	"()" source => {
		iterator = source.iterate()
		return this.clone {
			read = id.o iterator
		}
	}
	
	iterate() => {
		const self = this
		return () => self.read()
	}
	
	"..." () => {
		const values = []
		for value in this: values.push value
		return ...values
	}
	
	map(fn) => {
		const self = this
		return this.clone {
			read() => {
				val = self.read()
				return if val != nil: fn(val)
			}
		}
	}
	
	group(fn) => {
		const source = this
		const buffer = []
		return this.clone {
			read() => {
				for x in source: {
					if fn(x, buffer.(buffer.length), buffer.length): {
						buffer.append(x)
					} else if buffer.length > 0: {
						const oldBuffer = buffer
						buffer = if fn(x, nil, 0): [x] else []
						return Stream(oldBuffer)
					}
				}
				-- Source is empty, buffer still has items
				if buffer.length > 0: return Stream(buffer)
			}
		}
	}
	
	splitAt(at) => group(x => x != at)
}

yield Stream
