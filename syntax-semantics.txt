================================================================================
									Syntax
================================================================================
https://wren.io/classes.html

To-Do / proposals
=================
- Newlines and other statement/expression separators
- Generic types? maybe later, if needed
- Default parameters?
- Named parameters by (<arg> = <exp>)
  - Following C# valid-ness, valid when one of:
    - First all positional parameters, then all named parameters
    - Named parameters in correct place?
- Passing single block as parameter
  - "Immediately-invoked function"
  - Allows positional arguments and named arguments
  - Automatically "destructured" to function call
  - Problem: what to do when you want to pass a single block parameter? (syntax)
- Compound assignment operators?
- Ternary operator? Don't think, I like lua's and-or method
- Pure functions as optimisation?

Operators and keywords
=========
- precedence
- associativity
- operators and keywords as first-class citizens? Would allow using all things as keys (and values)
  - as keys for defining operator methods
  - as values for storing and passing to functions
  - problem: how to use operators from parameters?
    - use any value as operator like haskell? not nice for readability
  - operators as classes? define operator instance methods inside operator's class
    instead of inside type's class:
    - + = { ()(a: Num, b: Num) => a + b } (would need to define this method on Num class load)
    - Num = { +(b) => this + b }
- keywords: return, yield (maybe later, together with coroutines/continuations), break, throw?
  - External / foreign? for function definitions that get populated later on by C or as interfaces
- true, false and nil/null are not keywords, but instances of Bool and Nil/Null classes
- unary operators: '-', '!' and other custom ones
- binary operators: '-', '+' and other custom ones
- wrap operators: '{}', '()', '[]', '""'
  - allow custom wrap operators? like '<>' would be nice, or '||'
  - I think impossible, interfering with allowing single-param function call without parentheses:
      a | b | c
      as 2x binary operator: (a | b) | c
      as wrap operator: a |b| c  (which is  a(|b|)(c))
    - possible (bad) solution: require no space present inside "brackets"
	  - problem for strings: " airy string "
	- better solution: set wrap operator precedence(?) such that this is not a problem (really low?)
  - maybe best to disallow custom wrap operators but have a few default unassigned
  - possible problem: does the wrap operator apply on only the content or also the expression before?
	- a[b] should call '[]' from a with b as argument: a.[](b)
	  - definition of '[]' method should be defined in class of a
    - a [b] should call '[]' with b as argument and pass that as argument to a: a([](b))
	  - definition of '[]' method should be defined in its own operator class
	    (see operators as first-class citizens ^)
  - disallow defining of predefined wrap operators as unary or binary operators!

The following:
	a
	-b
	.c()
gets parsed as expression:
	a - b.c()
But this:
	a
	-b
	c()
gets parsed as expression? followed by statement:
	a - b
	c()
This means ?

Blocks, classes, functions (all the same?)
==========================================
Blocks serve many purposes at once:
- Objects (storing values by string keys)
- Arrays (storing values by numeric keys)
- Maps? (storing values by any type keys)
- Classes (objects with constructors and instance variables/methods)
- Grouping of code chunks (if, while, for etc)
- Functions (code chunks with parameters)

- exp ::= var | number | string | unop exp | exp binop exp | block | lambda | fncall | '(' exp ')'
- stat ::= sep
         | varlist '=' explist
         | fncall
         | {modifier} identifier ['(' arglist ')'] '=>' chunk
         | 'if' exp ':' chunk {'elseif' exp ':' chunk} ['else' chunk]
         | 'while' exp ':' chunk
         | 'for' varlist 'in' explist ':' chunk
- chunk ::= stat  |  block
- block ::= {modifier} '{' [explist] {stat} '}'
- lambda ::= '(' arglist ')' '=>' chunk (also allow leaving out '('arglist')' here? I think impossible)
- identifier ::= letter [{alphanum}]  |  '`' {character} '`'
- fncall ::= prefixexp args
- args ::= exp  |  '(' [explist] ')'
- explist ::= exp {sep exp}
- sep ::= '\n' | ';' | ','

List / array syntax using `()` or `[]` as syntax sugar. These are all equal:
(10, 20, a = b, 30)
(
	10
	20
	a = b
	30
)
extend List {
	`1` = 10
	`2` = 20
	a = b
	`3` = 30
}

Inheritance:
- Point = Vector { } (call static superclass)
- Point = extend Vector { } (with `extend` keyword)
- Point = { @extend Vector } (with @attribute annotation)

Example
=======
Point = { (Point is a block/class/object, but really an immediately-invoked function)
	static `()`(x, y) => { (call method for Point "class" / object)
		this.x = x
		this.y = y
	}
	`+`(p) => Point(this.x + p.x, this.y + p.y) (addition method for Point instances)
	getX => this.x ("getter method", no argument list, will be invoked on myPoint.getX)
	setX(x) => { this.x = x } (normal method, assignments are not expressions so brackets necessary)
	
	static base = { (static immediately-invoked function, block: Point.base = 11)
		x = 10
		return x + 1
	}
	static next = static.base + 1 (static "immediately-invoked function", really just a field)
	static nget => static.base + 1 (static "getter method")
	static getBase() => Point.base (static shorthand method, Point.getBase() returns 11)
}

Functions
=========
- myFunction(x: Int): Int => {
	return x + 1
}
- callback () => 10
- callback (x: Int): Int => x + 1
- Optional types: (x: Int) or (Int x)
  - C-style:  Int myFunction(Int x) => x + 1 (can only be used in normal definitions)
  - TS / Kotlin-style: myFunction(x: Int): Int => x + 1 (can also be used in lambda definitions?)
- no space allowed between name and arglist, otherwise function application
- define associativity, which is more useful? `map increment myList` can be
  - `map(increment)(myList)` (functional style / currying?)
  - `map(increment(myList))`
- "Full" definition is syntax sugar for lambda style:
  - add(x, y) => x + y (definition as statement)
  - add = (x, y) => x + y (definition by assigning function expression)
- overloading based on arity, otherwise argument types when present
- Getters by using argument-less methods, setters?



================================================================================
									Semantics
================================================================================
- Function closures

Self (this?) upvalue (keyword?)
- Only for instance (non-static) methods
- Refers to current instance

Static upvalue (keyword?)
- Refers to current block / class

Super upvalue (keyword?)
- Refers to superclass

Variable lookup
===============
1. locals
2. (for instance methods) instance variables of current class (implicit `self.`/`this.`)
2.1. instance variables of superclass
3. static variables of current class (implicit `static.`)
3.1. static variables of superclass

Modifiers
=========
Apply to variables (not values). By default, only `public` is applied implicitly.
- private: variable only accessable (readable/writable) within the same class
- public: opposite of private, and thus mutually exclusive
- const: cannot assign other value to variable
- static: variable exists in class, instead of in its instances

- assign to const value: error
- read private value: yield nil/null?
- write private value: error? do nothing?

Blocks can have default modifiers, which apply to all variables inside
the block that are not marked the opposite:
Point = private {
	public getX => this.x (this method is public)
	setX(x) => { this.x = x } (this one is private)
}

"Class" (block) constructors are static call operator methods
